class {{enumName}} {
  /// The underlying value of this enum member.
  final {{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}String{{/isContainer}} value;

  const {{enumName}}._internal(this.value);

  {{#allowableValues}}
  {{#enumVars}}
  {{#description}}
  /// {{description}}
  {{/description}}
  static const {{enumName}} {{name}} = {{enumName}}._internal({{{value}}});
  {{/enumVars}}
  {{/allowableValues}}

  static List<{{enumName}}> get values => const [
    {{#allowableValues}}
      {{#enumVars}}
        {{{name}}},
      {{/enumVars}}
    {{/allowableValues}}
      ];

{{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}String{{/isContainer}} toJson () {
    return value;
  }

  @override
  String toString () {
    return value;
  }

  static {{enumName}} fromJson({{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}String{{/isContainer}} data) {
    switch (data) {
    {{#allowableValues}}
        {{#enumVars}}
            case {{{value}}}: return {{enumName}}.{{{name}}};
        {{/enumVars}}
    {{/allowableValues}}
    default: return null;
    }
  }

  static List<{{enumName}}> listFromJson(List<dynamic> json) {
    return json == null
      ? List<{{enumName}}>()
      : json.map((value) => {{enumName}}.fromJson(value)).toList();
  }
}
